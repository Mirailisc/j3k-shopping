// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  password     String
  firstName    String
  lastName     String
  isAdmin      Boolean  @default(false)
  isSuperAdmin Boolean  @default(false)
  createdAt    DateTime @default(now())

  Product Products[]
  Review  Reviews[]
  Contact Contact?
  Social  Social?

  orders       Order[]        @relation("UserOrders")
  Notification Notification[]
}

model Contact {
  id        String   @id @default(uuid())
  phone     String?
  address   String?
  city      String?
  province  String?
  zipCode   String?
  country   String?
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Social {
  id        String   @id @default(uuid())
  line      String?
  facebook  String?
  website   String?
  instagram String?
  tiktok    String?
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Products {
  id          String    @id @default(uuid())
  name        String
  productImg  Bytes
  description String
  price       Float
  quantity    Int
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  Review      Reviews[]
}

model Reviews {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  product   Products @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  Pending
  Paid
  Shipped
  Delivering
  Completed
  Cancelled
  Refunded
  Refunding
}

model Order {
  id        String      @id @default(uuid())
  status    OrderStatus @default(Pending)
  createdAt DateTime    @default(now())
  total     Float
  userId    String
  evidence  Bytes?
  productId String
  amount    Float

  user User @relation("UserOrders", fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
